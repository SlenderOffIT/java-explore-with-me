drop table if exists categories, compilations, users, locations, events, requests, event_compilation;

create table if not exists categories (
    id integer generated by default as identity not null,
    name varchar(150) not null unique,
    CONSTRAINT pk_categorys PRIMARY KEY (id)
);

create table if not exists compilations (
    id integer generated by default as identity not null,
    pinned boolean not null,
    title varchar not null,
    CONSTRAINT pk_compilation PRIMARY KEY (id)
);

create table if not exists users (
    id integer generated by default as identity not null,
    name varchar not null,
    email varchar not null unique,
    CONSTRAINT pk_users PRIMARY KEY (id)
);

create table if not exists locations (
    id integer generated by default as identity not null,
    lat float not null,
    lon float not null,
    CONSTRAINT pk_locations PRIMARY KEY (id)
);

create table if not exists events (
  id integer generated by default as identity not null,
  annotation varchar not null,
  description varchar not null,
  title varchar not null,
  state varchar not null,
  initiator_id integer not null references users(id) on delete cascade,
  category_id integer not null references categories(id) on delete cascade,
  location_id integer not null references locations(id) on delete cascade,
  created timestamp without time zone not null,
  event_date timestamp without time zone not null,
  published_on timestamp without time zone,
  paid boolean,
  request_moderation boolean,
  participant_limit integer default 0,
  views integer not null,
  CONSTRAINT pk_events PRIMARY KEY (id)
);

create table if not exists requests (
    id integer generated by default as identity not null primary key,
    requester_id integer references users (id) on delete cascade,
    event_id integer references events (id) on delete cascade,
    created timestamp not null,
    status varchar not null
);

create table if not exists event_compilation (
  compilation_id integer references compilations (id) on delete cascade,
  event_id integer references events (id) on delete cascade,
  primary key (compilation_id, event_id)
);